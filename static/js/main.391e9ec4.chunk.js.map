{"version":3,"sources":["components/TextBox.js","components/TwitterButton.js","action-creators/didFetchQuote.js","action-creators/startedFetchingQuote.js","action-creators/filterQuotes.js","action-creators/fetchQuote.js","components/NewQuoteButton.js","components/QuoteBox.js","components/Dropdown.js","App.js","serviceWorker.js","functionsForReducers.js","reducers/fetchQuoteReducer.js","reducers/rootReducer.js","store.js","index.js"],"names":["TextBox","_ref","msg","author","color","opacity","react_default","a","createElement","id","style","dangerouslySetInnerHTML","__html","TwitterButton","props","backgroundColor","href","className","DID_FETCH_QUOTE","didFetchQuote","text","type","filterQuotes","filterOption","quotesFromFCC","fetch","then","response","json","data","fetchQuote","dispatch","getState","isFetchingQuote","console","log","Promise","reject","allTags","filterFromState","quoteFilter","Math","floor","random","length","quote","character","cache","exec","content","title","quotes","randomIndex","setTimeout","NewQuoteButton","onClick","this","mainColor","Component","connect","state","fixedEncodeURIComponent","str","encodeURIComponent","replace","c","charCodeAt","toString","QuoteBox","components_TextBox","quoteText","quoteAuthor","TwitterButton_TwitterButton","components_NewQuoteButton","quoteTextOpacity","Dropdown","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","dispatchSelectedOption","bind","assertThisInitialized","isInputInvalid","options","values","optionsJSX","i","push","value","key","_this$props","event","target","onChange","optionValue","App","components_QuoteBox","components_Dropdown","Boolean","window","location","hostname","match","getRandomColor","fetchQuoteReducer","action","copyState","assign","rootReducer","combineReducers","initialState","store","createStore","applyMiddleware","thunk","subscribe","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.391e9ec4.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../components-style/TextBox.css';\r\n\r\nconst TextBox = ({msg, author, color, opacity}) => {\r\n    return (\r\n        <div id=\"text-box\" style={{color: color, opacity: opacity}}>\r\n            <p id=\"text\">\r\n                <span id=\"quotation\">{'\\u201C'}</span>\r\n                <span dangerouslySetInnerHTML={\r\n                    {__html: msg}} ></span>\r\n                    {/* this regex is removing <p> and </p>*/}\r\n            </p>\r\n            <p id=\"author\" dangerouslySetInnerHTML={{__html: \"- \" + author}}></p>\r\n            {/* these dangerouslySetInnerHTML where only necessary because of the challenges' restrictions \r\n            of having ids on text and author \r\n                I could have faked with a empty <p id=\"text\"></p>, but that's not the goal*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextBox;","import React from 'react';\r\nimport '../components-style/TwitterButton.css';\r\n\r\n\r\nexport default function TwitterButton(props) {\r\n    return (\r\n        <div id=\"tweet-box\" style={{backgroundColor: props.backgroundColor}}>\r\n            <a id=\"tweet-quote\" href={props.href}>\r\n                <i className=\"fab fa-twitter\"></i>\r\n            </a>\r\n        </div>\r\n    );\r\n}\r\n","export const DID_FETCH_QUOTE = 'DID_FETCH_QUOTE';\r\nexport function didFetchQuote(text, author) {\r\n    return {\r\n        type: DID_FETCH_QUOTE,\r\n        text, author\r\n    };\r\n};","export const STARTED_FETCHING_QUOTE = 'STARTED_FETCHING_QUOTE';\r\nexport const startedFetchingQuote = () => ({type: STARTED_FETCHING_QUOTE});\r\n","export const FILTER_QUOTES = 'FILTER_QUOTES';\r\nexport const filterQuotes = (filterOption) => ({\r\n    type: FILTER_QUOTES, filterOption\r\n})","import { didFetchQuote } from \"./didFetchQuote\";\r\nimport { startedFetchingQuote } from \"./startedFetchingQuote\";\r\nimport { filterQuotes } from \"./filterQuotes\";\r\n\r\nlet quotesFromFCC = [];\r\nfetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\r\n).then(response => response.json()\r\n).then(data => {\r\n    quotesFromFCC = data;\r\n});\r\n\r\n\r\n\r\n\r\nconst fetchQuote = () => (dispatch, getState) => {\r\n    if (getState().isFetchingQuote) {\r\n        console.log(\"already fetching!!!\");\r\n        return Promise.reject(\"Already fetching\");\r\n    }\r\n    console.log(\"started fetching...\");\r\n    dispatch(startedFetchingQuote());\r\n    let allTags = [\"Simpsons\", \"design\", \"default\"]\r\n    let filterFromState = getState().fetch.quoteFilter;\r\n    let quoteFilter = filterFromState === 'all' ? \r\n        allTags[Math.floor(Math.random()*allTags.length)] : filterFromState;\r\n    console.log(filterFromState);\r\n    console.log(quoteFilter);\r\n    switch (quoteFilter) {\r\n        case 'Simpsons':\r\n            return fetch(\"https://thesimpsonsquoteapi.glitch.me/quotes\"\r\n            ).then(response => response.json(), () => { \r\n                dispatch(filterQuotes('all'));\r\n                dispatch(fetchQuote());\r\n                console.log(\"CATCHED FETCH ERROR IN SIMPSONS\");\r\n                return Promise.reject();\r\n            }\r\n            ).then(data => dispatch(\r\n                didFetchQuote(data[0].quote, data[0].character)));\r\n\r\n        case 'design':\r\n            return fetch(\"https://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1\", { cache: 'no-cache' }\r\n            ).then(response => response.json(), () => {\r\n                dispatch(filterQuotes('all'));\r\n                dispatch(fetchQuote());\r\n                console.log(\"CATCHED FETCH ERROR IN DESIGN\");\r\n                return Promise.reject();\r\n            }\r\n            ).then(data => dispatch(\r\n                didFetchQuote(/(?<=<p>).+(?=<[/]p>)/.exec(data[0].content)\r\n                    // removing <p> and </p> from content, content has HTML code, like &lt;\r\n                    , data[0].title)));\r\n\r\n        default:\r\n            if (!quotesFromFCC.quotes) fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\r\n            ).then(response => response.json()\r\n            ).then(data => {\r\n                quotesFromFCC = data;\r\n                let randomIndex = Math.floor(Math.random() * quotesFromFCC.quotes.length)\r\n                setTimeout(() => {\r\n                    dispatch(didFetchQuote(quotesFromFCC.quotes[randomIndex].quote,\r\n                        quotesFromFCC.quotes[randomIndex].author));\r\n                }, 400);\r\n            });\r\n            else {\r\n                let randomIndex = Math.floor(Math.random() * quotesFromFCC.quotes.length)\r\n                setTimeout(() => {\r\n                    dispatch(didFetchQuote(quotesFromFCC.quotes[randomIndex].quote,\r\n                        quotesFromFCC.quotes[randomIndex].author));\r\n                }, 400); // aesthetic delay\r\n            }\r\n            \r\n\r\n    }\r\n    \r\n};\r\n\r\nexport default fetchQuote;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../components-style/NewQuoteButton.css';\r\nimport fetchQuote from '../action-creators/fetchQuote';\r\n\r\nclass NewQuoteButton extends Component {\r\n    render() {\r\n        return (  \r\n            <button id=\"new-quote\" className=\"btn\" onClick={this.props.fetchQuote}\r\n            style={{backgroundColor: this.props.mainColor}}>New quote</button>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    mainColor: state.fetch.mainColor\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchQuote: () => dispatch(fetchQuote())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewQuoteButton);\r\n\r\n","import React, { Component } from 'react';\r\nimport TextBox from './TextBox';\r\nimport TwitterButton from './TwitterButton';\r\nimport '../components-style/QuoteBox.css';\r\nimport NewQuoteButton from './NewQuoteButton';\r\nimport { connect } from 'react-redux';\r\nimport fetchQuote from '../action-creators/fetchQuote';\r\n\r\n// MDN https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\r\nfunction fixedEncodeURIComponent (str) {\r\n    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\r\n      return '%' + c.charCodeAt(0).toString(16);\r\n    });\r\n  }\r\n\r\nclass QuoteBox extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchQuote();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"quote-box\">\r\n                <TextBox msg={this.props.quoteText} \r\n                author={this.props.quoteAuthor}\r\n                color={this.props.mainColor}\r\n                opacity={this.props.opacity}/>\r\n                <div id=\"bottom-of-quotebox-container\">\r\n                    <TwitterButton backgroundColor={this.props.mainColor}\r\n                        href={`https://twitter.com/intent/tweet/?text=\"` +\r\n                        fixedEncodeURIComponent(this.props.quoteText) + `\" - ` + fixedEncodeURIComponent(this.props.quoteAuthor)}/>\r\n                    <div id=\"new-quote-container\">\r\n                        <NewQuoteButton />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({fetch}) => ({\r\n    quoteText: fetch.quoteText,\r\n    quoteAuthor: fetch.quoteAuthor,\r\n    mainColor: fetch.mainColor,\r\n    isFetchingQuote: fetch.isFetchingQuote,\r\n    opacity: fetch.quoteTextOpacity\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    fetchQuote: () => dispatch(fetchQuote()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuoteBox);\r\n","import React, { Component } from 'react';\r\nimport '../components-style/Dropdown.css';\r\nimport '../App.css';\r\nimport { filterQuotes } from '../action-creators/filterQuotes';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass Dropdown extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.dispatchSelectedOption = this.dispatchSelectedOption.bind(this);\r\n        this.isInputInvalid = this.isInputInvalid.bind(this);\r\n\r\n        const {options, values} = props;\r\n        if (this.isInputInvalid()) return [];\r\n        let optionsJSX = [];\r\n        for (let i = 0; i < options.length; i++) {\r\n            optionsJSX.push(\r\n            <option value={values[i]} key={i}>{options[i]}</option>);\r\n        }\r\n        this.state = {optionsJSX: optionsJSX}\r\n    }\r\n\r\n    isInputInvalid() {\r\n        const {options, values} = this.props;\r\n        return (options.length === 0 || values.length === 0\r\n            || options.length !== values.length);\r\n    }\r\n\r\n    dispatchSelectedOption(event) {\r\n        this.props.filterQuotes(event.target.value);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <select value={this.props.quoteFilter} onChange={this.dispatchSelectedOption}>\r\n                {this.state.optionsJSX}\r\n            </select>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({fetch}) => ({\r\n    quoteFilter: fetch.quoteFilter\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    filterQuotes: (optionValue) => dispatch(filterQuotes(optionValue))\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dropdown);","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport QuoteBox from './components/QuoteBox';\r\nimport { connect } from 'react-redux';\r\nimport Dropdown from './components/Dropdown';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\" style={{backgroundColor: this.props.mainColor}}>\r\n          <header>Random Quote Machine</header>\r\n          <QuoteBox />\r\n          <p id=\"searching-for\">Searching for {this.props.quoteFilter} quotes</p>\r\n          <div id=\"dropdown\">\r\n            <Dropdown options={[\"All\", \"Simpsons\", \"Design\"]} values={[\"all\", \"Simpsons\", \"design\"]}></Dropdown>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  mainColor: state.fetch.mainColor,\r\n  quoteFilter: state.fetch.quoteFilter\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export function getRandomColor() {\r\n    let values = [\"#7A7163\", \"#E3223C\", \"#3D9D2D\", \"#E5267C\", \"#2F3BAF\", \"#37ACC9\", \"#14C271\", \"#606664\", \"#00513B\", \"#A04F63\", \"#60B54A\", \"#BD318F\", \"#FD7938\", \"#3A336E\", \"#277E73\", \"#795417\", \"#86515B\", \"#2E7590\", \"#5D9257\"];\r\n    return values[Math.floor((Math.random()*values.length))];\r\n}","import { getRandomColor } from \"../functionsForReducers\";\r\nimport { STARTED_FETCHING_QUOTE } from \"../action-creators/startedFetchingQuote\";\r\nimport { DID_FETCH_QUOTE } from \"../action-creators/didFetchQuote\";\r\nimport { FILTER_QUOTES } from \"../action-creators/filterQuotes\";\r\n\r\n\r\nconst fetchQuoteReducer = (state, action) => {\r\n    console.log(\"FETCH_QUOTE_REDUCER VIEW OF STATE\");\r\n    console.log(state);\r\n    let copyState = Object.assign({}, state);\r\n    switch (action.type) {\r\n        case STARTED_FETCHING_QUOTE:\r\n            console.log(\"STARTED_FETCHING_QUOTE\");\r\n            if (state.isFetchingQuote) {\r\n                console.log(\"ALREADY_FETCHING\");\r\n                return state;\r\n            }\r\n            return Object.assign(copyState, \r\n                {isFetchingQuote: true, mainColor: getRandomColor(),\r\n                quoteTextOpacity: 0});\r\n        \r\n        case DID_FETCH_QUOTE:\r\n            console.log(\"DID_FETCH_QUOTE\");\r\n            return Object.assign(copyState, \r\n                {isFetchingQuote: false, quoteTextOpacity: 1,\r\n                quoteText: action.text, quoteAuthor: action.author});\r\n        \r\n        case FILTER_QUOTES:\r\n            console.log(\"FILTER_QUOTE\");\r\n            return Object.assign(copyState, {\r\n                quoteFilter: action.filterOption\r\n            })\r\n\r\n        default:\r\n            return copyState;\r\n    }\r\n}\r\n\r\nexport default fetchQuoteReducer;","import { combineReducers } from 'redux';\r\nimport fetchQuoteReducer from \"./fetchQuoteReducer\";\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({fetch: fetchQuoteReducer});\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers/rootReducer';\r\nimport thunk from 'redux-thunk'\r\nimport { getRandomColor } from \"./functionsForReducers\";\r\n\r\n\r\n\r\nconst initialState = {\r\n\r\n    fetch: {\r\n    mainColor: getRandomColor(),\r\n    isFetchingQuote: false, quoteTextOpacity: 1, // quoteTextOpacity indicates if QuoteBox must fade out/in\r\n    quoteText: \"\", quoteAuthor: \"\",\r\n    quoteFilter: \"all\"}\r\n\r\n};\r\n\r\nconst store = createStore(rootReducer, initialState,\r\n    applyMiddleware(thunk));\r\n\r\n\r\nstore.subscribe(() => {\r\n    console.log(\"--------------\");\r\n    console.log(\"current state:\");\r\n    console.log(store.getState());\r\n    console.log(\"--------------\");\r\n});\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}