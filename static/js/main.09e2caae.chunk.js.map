{"version":3,"sources":["components/TextBox.js","components/TwitterButton.js","action-creators/didFetchQuote.js","action-creators/startedFetchingQuote.js","action-creators/fetchQuote.js","components/NewQuoteButton.js","components/QuoteBox.js","components/Dropdown.js","action-creators/filterQuotes.js","App.js","serviceWorker.js","functionsForReducers.js","reducers/fetchQuoteReducer.js","reducers/rootReducer.js","store.js","index.js"],"names":["TextBox","_ref","msg","author","color","opacity","react_default","a","createElement","id","style","dangerouslySetInnerHTML","__html","connect","state","quoteText","fetch","quoteAuthor","backgroundColor","props","Object","objectWithoutProperties","href","concat","encodeURIComponent","className","DID_FETCH_QUOTE","didFetchQuote","text","type","quotesFromFCC","then","response","json","fetchQuote","asyncToGenerator","regenerator_default","mark","_callee","dispatch","getState","allTags","filterFromState","quoteFilter","designQuotes","quote","quotesArr","quoteObj","wrap","_context","prev","next","isFetchingQuote","console","log","abrupt","Promise","reject","Math","floor","random","length","t0","data","character","cache","sent","exec","content","rendered","title","quotes","stop","_x","_x2","apply","this","arguments","NewQuoteButton","onClick","mainColor","Component","fixedEncodeURIComponent","str","replace","c","charCodeAt","toString","QuoteBox","components_TextBox","components_TwitterButton","components_NewQuoteButton","quoteTextOpacity","Dropdown","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","dispatchSelectedOption","bind","assertThisInitialized","isInputInvalid","options","values","optionsJSX","i","push","value","key","_this$props","event","filterQuotes","target","onChange","optionValue","filterOption","App","components_QuoteBox","components_Dropdown","Boolean","window","location","hostname","match","getRandomColor","fetchQuoteReducer","action","copyState","assign","rootReducer","combineReducers","initialState","store","createStore","applyMiddleware","thunk","subscribe","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09e2caae.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../components-style/TextBox.css';\r\n\r\nconst TextBox = ({ msg, author, color, opacity }) => {\r\n    return (\r\n        <div id=\"text-box\" style={{ color: color, opacity: opacity }}>\r\n            <p id=\"text\">\r\n                <span id=\"quotation\">{'\\u201C'}</span>\r\n                <span dangerouslySetInnerHTML={\r\n                    { __html: msg }} ></span>\r\n                {/* this regex is removing <p> and </p>*/}\r\n            </p>\r\n            <p id=\"author\" dangerouslySetInnerHTML={{ __html: \"- \" + author }}></p>\r\n            {/* these dangerouslySetInnerHTML were only necessary because of the challenge's restrictions \r\n            of having ids on text and author \r\n                I could have faked with a empty <p id=\"text\"></p>, but that's not the goal*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextBox;","import React from 'react';\r\nimport '../components-style/TwitterButton.css';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst TwitterButton = ({ backgroundColor, ...props }) => {\r\n    return (\r\n        <div id=\"tweet-box\" style={{ backgroundColor: backgroundColor }}>\r\n            <a id=\"tweet-quote\" href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(props.quoteText + \" - \" + props.quoteAuthor)}`}>\r\n                <i className=\"fab fa-twitter\"></i>\r\n            </a>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    quoteText: state.fetch.quoteText,\r\n    quoteAuthor: state.fetch.quoteAuthor\r\n});\r\n\r\nexport default connect(mapStateToProps)(TwitterButton);\r\n","export const DID_FETCH_QUOTE = 'DID_FETCH_QUOTE';\r\nexport function didFetchQuote(text, author) {\r\n    return {\r\n        type: DID_FETCH_QUOTE,\r\n        text, author\r\n    };\r\n};","export const STARTED_FETCHING_QUOTE = 'STARTED_FETCHING_QUOTE';\r\nexport const startedFetchingQuote = () => ({type: STARTED_FETCHING_QUOTE});\r\n","import { didFetchQuote } from \"./didFetchQuote\";\r\nimport { startedFetchingQuote } from \"./startedFetchingQuote\";\r\n\r\nconst quotesFromFCC = fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\r\n).then(response => response.json()\r\n);\r\n\r\n\r\n\r\n// dispatch(fetchQuote()) dispatches a function with arguments (dispatch, getState) provided by the middleware,\r\n// that enables updating the store asyncronously\r\nconst fetchQuote = () => async (dispatch, getState) => {\r\n\r\n    if (getState().isFetchingQuote) {\r\n        console.log(\"already fetching!!!\");\r\n        return Promise.reject(\"Already fetching\");\r\n    }\r\n    console.log(\"started fetching...\");\r\n    dispatch(startedFetchingQuote());\r\n    let allTags = [\"Simpsons\", \"design\", \"default\"]\r\n    let filterFromState = getState().fetch.quoteFilter;\r\n    let quoteFilter = filterFromState === 'all' ?\r\n        allTags[Math.floor(Math.random() * allTags.length)] : filterFromState;\r\n    console.log(filterFromState);\r\n    console.log(quoteFilter);\r\n    switch (quoteFilter) {\r\n        case 'Simpsons':\r\n            fetch(\"https://thesimpsonsquoteapi.glitch.me/quotes\"\r\n            ).then(response => response.json()\r\n            ).then(data => dispatch(\r\n                didFetchQuote(data[0].quote, data[0].character)));\r\n            break;\r\n        case 'design':\r\n            const designQuotes = await fetch(\"https://quotesondesign.com/wp-json/wp/v2/posts/?orderby=rand\", { cache: 'no-store' }\r\n            ).then(response => response.json()\r\n            ); // the API isn't sending random responses...\r\n            const quote = designQuotes[Math.floor(Math.random() * designQuotes.length)];\r\n            dispatch(\r\n                didFetchQuote(/(?<=<p>).+(?=<[/]p>)/.exec(quote.content.rendered)\r\n                    // removing <p> and </p> from content, content has HTML code, like &lt;\r\n                    , quote.title.rendered))\r\n            break;\r\n        default:\r\n            const quotesArr = (await quotesFromFCC).quotes;\r\n            const quoteObj = quotesArr[Math.floor(Math.random() * quotesArr.length)];\r\n            dispatch(didFetchQuote(quoteObj.quote, quoteObj.author));\r\n    }\r\n\r\n};\r\n\r\nexport default fetchQuote;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../components-style/NewQuoteButton.css';\r\nimport fetchQuote from '../action-creators/fetchQuote';\r\n\r\nclass NewQuoteButton extends Component {\r\n    render() {\r\n        return (  \r\n            <button id=\"new-quote\" className=\"btn\" onClick={this.props.fetchQuote}\r\n            style={{backgroundColor: this.props.mainColor}}>New quote</button>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    mainColor: state.fetch.mainColor\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchQuote: () => dispatch(fetchQuote())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewQuoteButton);\r\n\r\n","import React, { Component } from 'react';\r\nimport TextBox from './TextBox';\r\nimport TwitterButton from './TwitterButton';\r\nimport '../components-style/QuoteBox.css';\r\nimport NewQuoteButton from './NewQuoteButton';\r\nimport { connect } from 'react-redux';\r\nimport fetchQuote from '../action-creators/fetchQuote';\r\n\r\n// MDN https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\r\nfunction fixedEncodeURIComponent (str) {\r\n    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\r\n      return '%' + c.charCodeAt(0).toString(16);\r\n    });\r\n  }\r\n\r\nclass QuoteBox extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchQuote();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"quote-box\">\r\n                <TextBox msg={this.props.quoteText} \r\n                author={this.props.quoteAuthor}\r\n                color={this.props.mainColor}\r\n                opacity={this.props.opacity}/>\r\n                <div id=\"bottom-of-quotebox-container\">\r\n                    <TwitterButton backgroundColor={this.props.mainColor}\r\n                        href={`https://twitter.com/intent/tweet/?text=\"` +\r\n                        fixedEncodeURIComponent(this.props.quoteText) + `\" - ` + fixedEncodeURIComponent(this.props.quoteAuthor)}/>\r\n                    <div id=\"new-quote-container\">\r\n                        <NewQuoteButton />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({fetch}) => ({\r\n    quoteText: fetch.quoteText,\r\n    quoteAuthor: fetch.quoteAuthor,\r\n    mainColor: fetch.mainColor,\r\n    isFetchingQuote: fetch.isFetchingQuote,\r\n    opacity: fetch.quoteTextOpacity\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    fetchQuote: () => dispatch(fetchQuote()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuoteBox);\r\n","import React, { Component } from 'react';\r\nimport '../components-style/Dropdown.css';\r\nimport '../App.css';\r\nimport { filterQuotes } from '../action-creators/filterQuotes';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass Dropdown extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.dispatchSelectedOption = this.dispatchSelectedOption.bind(this);\r\n        this.isInputInvalid = this.isInputInvalid.bind(this);\r\n\r\n        const {options, values} = props;\r\n        if (this.isInputInvalid()) return [];\r\n        let optionsJSX = [];\r\n        for (let i = 0; i < options.length; i++) {\r\n            optionsJSX.push(\r\n            <option value={values[i]} key={i}>{options[i]}</option>);\r\n        }\r\n        this.state = {optionsJSX: optionsJSX}\r\n    }\r\n\r\n    isInputInvalid() {\r\n        const {options, values} = this.props;\r\n        return (options.length === 0 || values.length === 0\r\n            || options.length !== values.length);\r\n    }\r\n\r\n    dispatchSelectedOption(event) {\r\n        this.props.filterQuotes(event.target.value);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <select value={this.props.quoteFilter} onChange={this.dispatchSelectedOption}>\r\n                {this.state.optionsJSX}\r\n            </select>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({fetch}) => ({\r\n    quoteFilter: fetch.quoteFilter\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    filterQuotes: (optionValue) => dispatch(filterQuotes(optionValue))\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dropdown);","export const FILTER_QUOTES = 'FILTER_QUOTES';\r\nexport const filterQuotes = (filterOption) => ({\r\n    type: FILTER_QUOTES, filterOption\r\n})","import React, { Component } from 'react';\nimport './App.css';\nimport QuoteBox from './components/QuoteBox';\nimport { connect } from 'react-redux';\nimport Dropdown from './components/Dropdown';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\" style={{backgroundColor: this.props.mainColor}}>\n          <header>Random Quote Machine</header>\n          <QuoteBox />\n          <p id=\"searching-for\">Searching for {this.props.quoteFilter} quotes</p>\n          <div id=\"dropdown\">\n            <Dropdown options={[\"All\", \"Simpsons\", \"Design\"]} values={[\"all\", \"Simpsons\", \"design\"]}></Dropdown>\n          </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  mainColor: state.fetch.mainColor,\n  quoteFilter: state.fetch.quoteFilter\n})\n\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export function getRandomColor() {\r\n    let values = [\"#7A7163\", \"#E3223C\", \"#3D9D2D\", \"#E5267C\", \"#2F3BAF\", \"#37ACC9\", \"#14C271\", \"#606664\", \"#00513B\", \"#A04F63\", \"#60B54A\", \"#BD318F\", \"#FD7938\", \"#3A336E\", \"#277E73\", \"#795417\", \"#86515B\", \"#2E7590\", \"#5D9257\"];\r\n    return values[Math.floor((Math.random()*values.length))];\r\n}","import { getRandomColor } from \"../functionsForReducers\";\r\nimport { STARTED_FETCHING_QUOTE } from \"../action-creators/startedFetchingQuote\";\r\nimport { DID_FETCH_QUOTE } from \"../action-creators/didFetchQuote\";\r\nimport { FILTER_QUOTES } from \"../action-creators/filterQuotes\";\r\n\r\n\r\nconst fetchQuoteReducer = (state, action) => {\r\n    console.log(\"FETCH_QUOTE_REDUCER VIEW OF STATE\");\r\n    console.log(state);\r\n    let copyState = Object.assign({}, state);\r\n    switch (action.type) {\r\n        case STARTED_FETCHING_QUOTE:\r\n            console.log(\"STARTED_FETCHING_QUOTE\");\r\n            if (state.isFetchingQuote) {\r\n                console.log(\"ALREADY_FETCHING\");\r\n                return state;\r\n            }\r\n            return Object.assign(copyState, \r\n                {isFetchingQuote: true, mainColor: getRandomColor(),\r\n                quoteTextOpacity: 0});\r\n        \r\n        case DID_FETCH_QUOTE:\r\n            console.log(\"DID_FETCH_QUOTE\");\r\n            return Object.assign(copyState, \r\n                {isFetchingQuote: false, quoteTextOpacity: 1,\r\n                quoteText: action.text, quoteAuthor: action.author});\r\n        \r\n        case FILTER_QUOTES:\r\n            console.log(\"FILTER_QUOTE\");\r\n            return Object.assign(copyState, {\r\n                quoteFilter: action.filterOption\r\n            })\r\n\r\n        default:\r\n            return copyState;\r\n    }\r\n}\r\n\r\nexport default fetchQuoteReducer;","import { combineReducers } from 'redux';\r\nimport fetchQuoteReducer from \"./fetchQuoteReducer\";\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({fetch: fetchQuoteReducer});\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers/rootReducer';\r\nimport thunk from 'redux-thunk'\r\nimport { getRandomColor } from \"./functionsForReducers\";\r\n\r\n\r\nconst initialState = {\r\n\r\n    fetch: {\r\n        mainColor: getRandomColor(),\r\n        isFetchingQuote: false, quoteTextOpacity: 1, // quoteTextOpacity indicates if QuoteBox must fade out/in\r\n        quoteText: \"\", quoteAuthor: \"\",\r\n        quoteFilter: \"all\"\r\n    }\r\n\r\n};\r\n\r\nconst store = createStore(rootReducer, initialState,\r\n    applyMiddleware(thunk));\r\n\r\n\r\nstore.subscribe(() => {\r\n    console.log(\"--------------\");\r\n    console.log(\"current state:\");\r\n    console.log(store.getState());\r\n    console.log(\"--------------\");\r\n});\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}